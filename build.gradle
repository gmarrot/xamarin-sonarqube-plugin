buildscript {
    ext {
        junitVersion = '5.7.0'
        ktlintVersion = '9.4.0'
    }
}

plugins {
    // Core
    id 'idea'
    id 'java-gradle-plugin'
    id 'maven-publish'

    // Kotlin
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'

    // Gradle
    id 'com.gradle.plugin-publish' version '0.12.0'

    // Tools
    id 'org.jlleitschuh.gradle.ktlint' version "$ktlintVersion"
    id 'org.jlleitschuh.gradle.ktlint-idea' version "$ktlintVersion"
}

apply from: "$rootDir/gradle/integration-test.gradle"

group 'com.betomorrow.gradle'
version '1.3.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    notSnapshot = { !version.endsWith("SNAPSHOT") }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compileOnly gradleApi()

    // Third Party
    compile 'com.betomorrow.gradle:xamarin-build-tools:1.9.0'

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testCompile 'org.assertj:assertj-core:3.17.2'
    testCompile gradleTestKit()

    testCompile 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'

    testRuntime "cglib:cglib-nodep:3.3.0"       // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:3.1"   // allows mocking of classes without default constructor (together with CGLIB)
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}


/**
 * Publishing
 */

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

publishing {
    publications {
        BintrayPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

pluginBundle {
    website = 'https://github.com/gmarrot/xamarin-sonarqube-plugin'
    vcsUrl = 'https://github.com/gmarrot/xamarin-sonarqube-plugin'

    tags = ['xamarin', 'sonarqube', 'plugin', 'msbuild', 'nuget', 'sonar-scanner']

    plugins {
        sonarqubePlugin {
            id = 'com.betomorrow.xamarin.sonarqube'
            displayName = 'Gradle Plugin for SonarQube Scanner for MSBuild'
            description = 'Plugin to execute SonarQube Scanner for MSBuild in .Net Projects.'
        }
    }
}

publishPlugins {
    onlyIf notSnapshot
}


/**
 * Gradle Wrapper
 */

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
